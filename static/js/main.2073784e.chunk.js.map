{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Title","Type","width","alt","src","Year","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","initialState","loading","movies","errorMessage","reducer","state","action","payload","error","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Response","Error","map","index","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6OAQeA,G,MAPA,SAACC,GACZ,OACI,4BAAQC,UAAU,cACd,4BAAKD,EAAME,SCkBRC,EAnBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACPC,EACe,QAAjBD,EAAME,OAHV,yIAGyDF,EAAME,OAC/D,OACI,yBAAKL,UAAU,SACX,4BAAKG,EAAMG,OACX,oCAAUH,EAAMI,MAChB,6BACI,yBACIC,MAAM,MACNC,IAAG,4BAAuBN,EAAMG,OAChCI,IAAKN,KAGb,+BAAKD,EAAMQ,KAAX,OCQGC,EAxBA,SAACb,GAAW,IAAD,EACgBc,mBAAS,IADzB,mBACfC,EADe,KACFC,EADE,KAatB,OACI,0BAAMf,UAAU,UACZ,2BACIgB,MAAOF,EACPG,SAfqB,SAACC,GAC9BH,EAAeG,EAAEC,OAAOH,QAehBI,KAAK,SAET,2BAAOC,QAZY,SAACH,GACxBA,EAAEI,iBACFvB,EAAMwB,OAAOT,GAJbC,EAAe,KAcyBK,KAAK,SAASJ,MAAM,aCf9DQ,EAAe,CACnBC,SAAS,EACTC,OAAQ,GACRC,aAAc,MAEVC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOV,MACb,IAAK,wBACH,OAAO,2BACFS,GADL,IAEEJ,SAAS,EACTE,aAAc,OAElB,IAAK,wBACH,OAAO,2BACFE,GADL,IAEEJ,SAAS,EACTC,OAAQI,EAAOC,UAEnB,IAAK,wBACH,OAAO,2BACFF,GADL,IAEEJ,SAAS,EACTE,aAAcG,EAAOE,QAEzB,QACE,OAAOH,IAuDEI,EApDH,WAAO,IAAD,EACUC,qBAAWN,EAASJ,GAD9B,mBACTK,EADS,KACFM,EADE,KAEhBC,qBAAU,WACRC,MAjCkB,kDAkCbC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJN,EAAS,CACPf,KAAM,wBACNW,QAASU,EAAa7B,cAG7B,IACH,IAoBQc,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,aAAcF,EAAYI,EAAZJ,QAC9B,OACI,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CAAQC,KAAK,WACb,kBAAC,EAAD,CAAQsB,OAxBC,SAAAT,GACbqB,EAAS,CACPf,KAAM,0BAERiB,MAAM,8BAAD,OAA+BvB,EAA/B,qBACAwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,SAA1BA,EAAaC,SACfP,EAAS,CACPf,KAAM,wBACNW,QAASU,EAAa7B,SAGxBuB,EAAS,CACPf,KAAM,wBACNY,MAAOS,EAAaE,cAU1B,uBAAG3C,UAAU,aAAb,yCACA,yBAAKA,UAAU,UACZyB,IAAYE,EACT,6CACAA,EACA,yBAAK3B,UAAU,gBAAgB2B,GAE/BD,EAAOkB,KAAI,SAACzC,EAAO0C,GAAR,OACP,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAc1C,EAAMG,OAASH,MAAOA,UCpE1D4C,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACThB,MAAK,SAAAqB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhC,QACf2B,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAArC,GACLiC,QAAQjC,MAAM,4CAA6CA,MC1FjEsC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,2BAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,2BAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtClB,MAAMiB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5B1C,MAAK,SAAAC,GAEJ,IAAM0C,EAAc1C,EAASyC,QAAQE,IAAI,gBAEnB,MAApB3C,EAAS4C,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM/C,MAAK,SAAAqB,GACjCA,EAAa2B,aAAahD,MAAK,WAC7BW,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM/C,MAAK,WACjC2B,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.2073784e.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Header = (props) => {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <h2>{props.text}</h2>\r\n        </header>\r\n    );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nconst DEFAULT_PLACEHOLDER_IMAGE =\r\n    \"https://images.unsplash.com/photo-1534068590799-09895a701e3e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1300&q=80\";\r\nconst Movie = ({ movie }) => {\r\n    const poster =\r\n        movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n    return (\r\n        <div className=\"movie\">\r\n            <h2>{movie.Title}</h2>\r\n            <h2>Type:{movie.Type}</h2>\r\n            <div>\r\n                <img\r\n                    width=\"200\"\r\n                    alt={`The movie titled: ${movie.Title}`}\r\n                    src={poster}\r\n                />\r\n            </div>\r\n            <p>({movie.Year})</p>\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default Movie;\r\n","import React, { useState } from \"react\";\r\nconst Search = (props) => {\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n    const handleSearchInputChanges = (e) => {\r\n        setSearchValue(e.target.value);\r\n    }\r\n    const resetInputField = () => {\r\n        setSearchValue(\"\")\r\n    }\r\n    const callSearchFunction = (e) => {\r\n        e.preventDefault();\r\n        props.search(searchValue);\r\n        resetInputField();\r\n    }\r\n    return (\r\n        <form className=\"search\">\r\n            <input\r\n                value={searchValue}\r\n                onChange={handleSearchInputChanges}\r\n                type=\"text\"\r\n            />\r\n            <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\r\n        </form>\r\n    );\r\n}\r\nexport default Search;\r\n","import React, { useReducer, useEffect } from \"react\";\nimport \"../App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n        .then(response => response.json())\n        .then(jsonResponse => {\n          dispatch({\n            type: \"SEARCH_MOVIES_SUCCESS\",\n            payload: jsonResponse.Search\n          });\n        });\n  }, []);\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n        .then(response => response.json())\n        .then(jsonResponse => {\n          if (jsonResponse.Response === \"True\") {\n            dispatch({\n              type: \"SEARCH_MOVIES_SUCCESS\",\n              payload: jsonResponse.Search\n            });\n          } else {\n            dispatch({\n              type: \"SEARCH_MOVIES_FAILURE\",\n              error: jsonResponse.Error\n            });\n          }\n        });\n  };\n  const { movies, errorMessage, loading } = state;\n  return (\n      <div className=\"App\">\n        <Header text=\"HOOKED\" />\n        <Search search={search} />\n        <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n        <div className=\"movies\">\n          {loading && !errorMessage ? (\n              <span>loading... </span>\n          ) : errorMessage ? (\n              <div className=\"errorMessage\">{errorMessage}</div>\n          ) : (\n              movies.map((movie, index) => (\n                  <Movie key={`${index}-${movie.Title}`} movie={movie} />\n              ))\n          )}\n        </div>\n      </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}